/*
 * Copyright 2018-2024 Saad Ahmed
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package com.saadahmedev.base.security.service;

import io.jsonwebtoken.Claims;
import org.jetbrains.annotations.NotNull;
import org.jetbrains.annotations.Nullable;

import java.io.Serializable;
import java.security.Key;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.function.Function;

/**
 * BaseJwtService provides a foundation for simplifying JWT (JSON Web Token) handling,
 * focusing on token creation and validation. This abstract class encapsulates common
 * functionalities for working with JWTs, such as extracting claims, checking expiration,
 * and generating access tokens.
 *
 * @param <I> The type of the identifier stored in the JWT claims.
 */
public abstract class BaseJwtService<I extends Serializable> {

    /**
     * Retrieves the username from the JWT token.
     *
     * @param token The JWT token from which to extract the username.
     * @return The username extracted from the token.
     *
     * @see #getClaimsFromToken(String)
     */
    public String getUsername(String token) {
        return getClaimFromToken(token, Claims::getSubject);
    }

    /**
     * Checks if the provided JWT token is expired.
     *
     * @param token The JWT token to check for expiration.
     * @return true if the token is expired, false otherwise.
     */
    public boolean isTokenExpired(String token) {
        return getExpirationDateFromToken(token).before(new Date());
    }

    /**
     * Retrieves the ID from the JWT token.
     *
     * @param token The JWT token from which to extract the ID.
     * @param key   The Claims map key
     * @param clazz The class type of the ID.
     * @return The ID extracted from the token.
     *
     * @see #getClaimsFromToken(String)
     */
    public I getId(String token, String key, Class<I> clazz) {
        return getClaimsFromToken(token).get(key, clazz);
    }

    /**
     * Retrieves the Role from the JWT token
     *
     * @param token The JWT token from which to extract the Role.
     * @param key   The Claims map key
     * @return the Role extracted from the token
     *
     * @see #getClaimsFromToken(String)
     */
    @Nullable
    public String getRole(String token, String key) {
        return getClaimsFromToken(token).get(key, String.class);
    }

    /**
     * Retrieves a list of authorities from the specified claim key in the JWT token.
     *
     * @param token The JWT token from which to extract the authorities.
     * @param key   The claim key specifying the list of authorities in the token.
     * @return A List of String representing the authorities extracted from the token.
     *         Returns null if the claim value is not a List<String> or if the claim is not present.
     * {@literal @SuppressWarnings("unchecked")} This annotation is used to suppress unchecked warnings
     *                              generated by casting the claim value to List<String>.
     *                              The implementation assumes that the claim value is intended
     *                              to be a List<String> based on the provided key.
     *                              If the claim value is not a List<String>, null is returned.
     *
     * @see #getClaimsFromToken(String)
     */
    @SuppressWarnings("unchecked")
    @Nullable
    public List<String> getAuthorities(String token, String key) {
        Object authorities = getClaimsFromToken(token).get(key);
        if (authorities instanceof List<?>) {
            return (List<String>) authorities;
        }
        return null;
    }

    /**
     * Retrieves the expiration date from token
     *
     * @param token The JWT token from which to extract the expiration date
     * @return The expiration date from token
     *
     * @see #getClaimsFromToken(String)
     */
    private Date getExpirationDateFromToken(String token) {
        return getClaimFromToken(token, Claims::getExpiration);
    }

    /**
     * Generates an access token for the given username.
     *
     * @param username The username for which to generate the access token.
     * @return The generated access token.
     *
     * @see #setupClaims(Map, String)
     */
    public String generateAccessToken(String username) {
        Map<String, Object> claims = new HashMap<>();
        setupClaims(claims, username);
        return generateAccessToken(claims, username);
    }

    /**
     * Sets up additional claims and generates an access token for the given username
     *
     * @param claims   Additional claims to include in the token
     * @param username The username for which to generate the access token.
     */
    protected void setupClaims(Map<String, Object> claims, String username) {
    }

    /**
     * Generates the access token with the given claims and username.
     *
     * @param claims   Additional claims to include in the token.
     * @param username The username for which to generate the access token.
     * @return The generated access token.
     */
    protected abstract String generateAccessToken(Map<String, Object> claims, String username);

    /**
     * Returns specific claim from the token
     *
     * @param token         is required to get the specific claim from token
     * @param claimResolver is required to specify which claim to get
     * @param <T>           is to specify which claim to get
     * @return {@link io.jsonwebtoken.Claims}   which will be extracted from the token
     *
     * @see #getClaimsFromToken(String)
     */
    private <T> T getClaimFromToken(String token, @NotNull Function<Claims, T> claimResolver) {
        return claimResolver.apply(getClaimsFromToken(token));
    }

    /**
     * Retrieves the claims from the JWT token.
     *
     * @param token The JWT token from which to extract the claims.
     * @return The {@link io.jsonwebtoken.Claims} extracted from the token.
     */
    protected abstract Claims getClaimsFromToken(String token);

    /**
     * Retrieves the signing key used for token generation and validation.
     *
     * @return The {@link java.security.Key} for token generation and validation.
     */
    protected abstract Key getSigningKey();
}
